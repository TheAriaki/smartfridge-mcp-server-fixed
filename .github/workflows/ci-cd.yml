name: SmartFridge MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run build

    - name: Run unit tests
      run: npm test -- --coverage --testPathPattern="tests/unit"

    - name: Run integration tests
      run: npm test -- --testPathPattern="tests/integration" --testNamePattern="^(?!.*Docker)"

    - name: Upload coverage reports
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run Docker integration tests
      run: npm test -- --testPathPattern="tests/integration/docker.test.ts" --testTimeout=300000

  end-to-end-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run end-to-end tests
      run: npm test -- --testPathPattern="tests/integration/end-to-end.test.ts" --testTimeout=120000

  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [test, docker-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run deployment validation
      run: node scripts/validate-deployment.js

    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-validation-report
        path: deployment-validation-report.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker-test, deployment-validation, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    if: github.event_name == 'release'

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Create release package
      run: |
        mkdir -p release
        cp -r build release/
        cp package.json package-lock.json README.md LICENSE release/
        cd release && tar -czf ../smartfridge-mcp-server-${{ github.event.release.tag_name }}.tar.gz .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./smartfridge-mcp-server-${{ github.event.release.tag_name }}.tar.gz
        asset_name: smartfridge-mcp-server-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Install Artillery
      run: npm install -g artillery@latest

    - name: Run performance tests
      run: |
        # Start the server in background
        SERVER_MODE=http PORT=3000 node build/index.js &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run performance test
        cat > perf-test.yml << EOF
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: "Health check"
            weight: 30
            flow:
              - get:
                  url: "/health"
          - name: "Add and list items"
            weight: 70
            flow:
              - post:
                  url: "/api/tools/addFoodItem"
                  json:
                    name: "Perf Test Item {{ \$randomString() }}"
                    quantity: 1
                    unit: "piece"
              - post:
                  url: "/api/tools/listFoodItems"
                  json: {}
        EOF
        
        artillery run perf-test.yml --output performance-report.json
        
        # Stop the server
        kill $SERVER_PID

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.json

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, docker-test, end-to-end-test, deployment-validation, security-scan]
    if: always()

    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.docker-test.result == 'success' && needs.end-to-end-test.result == 'success' && needs.deployment-validation.result == 'success'
      run: |
        echo "🎉 All tests passed! SmartFridge MCP Server is ready for deployment."

    - name: Notify failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Some tests failed. Please check the workflow logs."
        exit 1